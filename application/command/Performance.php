<?php


namespace app\command;


use think\console\Command;
use think\console\Input;
use think\console\Output;
use think\Db;

class Performance extends Command
{

    private $log = [];

    private $member_cate = [];

    protected function configure()
    {
        //parent::configure(); // TODO: Change the autogenerated stub
        $this->setName("performance");
    }

    protected function execute(Input $input, Output $output)
    {
        ini_set("memory_limit", "3072M");
        $day = date("Ymd",strtotime("-1 day"));
        $time = strtotime(date("Y-m-d")." 00:00:00");

        $this->outAndLog($day." start\n");
        $this->memberCate();
        //算业绩start
        $performance = $this->allPerformance($day);
        $stock = $this->allStock();
        $this->outAndLog(" all stock:{$stock}\n");
        //每一股多少钱
        $per_stock = round(($performance*200*0.15)/$stock, 2);
        $this->outAndLog(" per_stock:{$per_stock}\n");
        $oldMember = $this->oldLevelList();
        $perMemberCate = $this->memberCateStock();
        /**
         * 执行分红 start
         */
        $this->outAndLog("setProfit begin\n");
        foreach ($oldMember as $item)
        {
            $s = round($per_stock*$perMemberCate[$item['oldlevel']], 2);
            $this->setProfit($item['id'], $s, $item['oldlevel']);
            $this->outAndLog("user_id:{$item['id']}, profit:{$s}, oldlevel:{$item['oldlevel']}\n");
        }
        $this->outAndLog("setProfit end\n");
        /**
         * end
         */
        /**
         * memberUpgrade start
         */
        $this->memberUpgrade($time);
        /**
         * memberUpgrade end
         */
        $this->outAndLog($day." end\n");
    }

    public function allPerformance($day)
    {
        $count = Db::name('groups_order')->alias('o')
            ->where("o.createday", "=", $day)
            ->where("o.pay_status", "=", "SUCCESS")
            ->where("o.status", "in", [1])
            ->where("o.is_del", "=", "n")
            ->where("o.pay_type", "=", "微信支付")
            ->where("o.pay_money", ">", 10)
            ->count("o.id");
        $this->outAndLog("orderCount:{$count}\n");
        return $count;
    }

    /**
     * 旧等级大于0的人
     * @return array|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    private function oldLevelList()
    {
        $list = Db::name("member")
            ->field("id, oldlevel")
            ->where("oldlevel", ">" ,0)
            ->select();
        return $list;
    }

    private function oldLevelGroupCount()
    {
        $r = [];
        $list = Db::name("member")
            ->field("oldlevel, count(oldlevel) as c")
            ->group("oldlevel")
            ->select();
        foreach ($list as $item)
        {
            $r[$item['oldlevel']] = $item['c'];
        }
        $this->outAndLog("member_old_level".json_encode($r)."\n");
        return $r;
    }

    public function allStock()
    {
        $r = $this->oldLevelGroupCount();
        $cate = $this->member_cate;
        $stock = 0;
        foreach ($cate as $item)
        {
            if (isset($r[$item['id']]))
                $stock = $stock + ( $item['auto_group']*$r[$item['id']] );
        }
        return $stock;
    }

    /**
     * 每个等级的占股
     * @return array
     */
    private function memberCateStock()
    {
        $r = [];
        $r[0] = 0;
        $cate = $this->member_cate;
        foreach ($cate as $item)
        {
            $r[$item['id']] = $item['auto_group'];
        }
        return $r;
    }

    /**
     * 每个等级最多能分多少
     * @return array
     */
    private function memberCateFenhong()
    {
        $r = [];
        $r[0] = 0;
        $cate = $this->member_cate;
        foreach ($cate as $item)
        {
            $r[$item['id']] = $item['group_fenhong'];
        }
        return $r;
    }

    private function memberCate()
    {
        $list = Db::name("member_cate")
            ->field("id, auto_group, group_fenhong")
            ->select();
        $this->member_cate = $list;
        $this->outAndLog("member_cate".json_encode($list)."\n");
        return $list;
    }


    /**
     * 分红
     * @param $uid
     * @param $money
     * @param $oldlevel
     * @return bool
     */
    public function setProfit($uid, $money, $oldlevel){
        $add['user_id']        = $uid;
        $add['groups_id']      = 0;
        $add['money']          = $money;
        $add['title']          = "业绩分红";
        $add['createtime']     = time();
        $add['createday']      = date("Ymd");
        $add['status']         = 1;
        $add['types']          = "fenhong";
        //查询总的分红数
        $zongshu = Db::name('member_distribution')->where('user_id',$uid)->where('status','>','0')->sum("money");
        $group_fenhong = 0;
        //拿出每个能总额
        $member_cate = $this->memberCateFenhong();
        $group_fenhong = $member_cate[$oldlevel];

        if($group_fenhong>0 && $zongshu < $group_fenhong){ //还能分红
            $nzongshu = $zongshu+$money;
            if($nzongshu>$group_fenhong){
                $add['money']          = $group_fenhong-$zongshu;
                $this->outAndLog("user_id:{$uid}, money update to {$add['money']}\n");
            }else
            {
                $add['money'] = $money;
            }
            if (Db::name('member_distribution')->insert($add))
            {
                $this->outAndLog("success insert:".json_encode($add));
            }else
            {
                $this->outAndLog("error insert:".json_encode($add));
            }
            return true;
        }elseif($group_fenhong==-1)
        {
            $add['money'] = $money;
            if (Db::name('member_distribution')->insert($add))
            {
                $this->outAndLog("success insert:".json_encode($add));
            }else
            {
                $this->outAndLog("error insert:".json_encode($add));
            }
            return true;
        }
        return false;
    }

    /**
     * 会员 old升级操作
     * @param $finishtime
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     */
    private function memberUpgrade($finishtime)
    {
        $this->outAndLog("memberUpgrade begin\n");
        $list = Db::name("member")->alias("m")
            ->distinct("true")
            ->field("m.id, m.level, m.oldlevel")
            ->leftJoin("groups g", "m.id=g.uid")
            ->where("m.level", ">",0)
            ->where("g.status", "in", [2, 3])
            ->where("g.finishtime", "<", $finishtime)
            ->select();
        //print_r($list);
        foreach ($list as $item)
        {
            if ($item['level']>$item['oldlevel'])
            {
                $upmem['oldlevel'] = $item['level'];
                //$this->outAndLog("user_id:{$item['id']},upgrade from:{$item['oldlevel']} to:{$item['level']}\n");
                if (Db::name('member')->where('id',$item['id'])->update($upmem))
                {
                    $this->outAndLog("user_id:{$item['id']},upgrade from:{$item['oldlevel']} to:{$item['level']} success\n");
                }else
                {
                    $this->outAndLog("update error user_id:{$item['id']},upgrade from:{$item['oldlevel']} to:{$item['level']}\n");
                }
            }
        }
        $this->outAndLog("memberUpgrade end\n");
    }


    private function setMsgLog($key, $msg)
    {
        if (isset($this->log[$key]))
            $this->log[$key][] = $msg;
        else
            $this->log[$key] = $msg;
    }

    private function outAndLog($msg)
    {
        $date = date("Ymd");
        echo $msg;
        file_put_contents(__DIR__."/{$date}.txt", $msg, FILE_APPEND);
    }


}